#!/bin/sh
# vim:foldmethod=marker:ts=2:sw=2:et

#- intial PATH, PS1 {{{
  export PATH=/bin:/sbin:/usr/bin:/usr/sbin
  PS1='\u@\h:\w\$ '

  [ -d /usr/local/bin ] && PATH="/usr/local/bin:$PATH"
  [ -d /usr/local/sbin ] && PATH="/usr/local/sbin:$PATH"

  [ -d /opt/bin ] &&  PATH="$PATH:/opt/bin"
  [ -d /opt/sbin ] && PATH="$PATH:/opt/sbin"
  umask 0022
# }}}
#- some info about the host system {{{
  hostinfo() {
    [ -f /etc/banner ] && cat /etc/banner

      (
      GW="$( ( ip -4 route show; ip -6 route show) | sed -nre '/^default / s/^.* dev ([^ ]+).+$/\1/ p' | sort -u)"
          for itf in $GW; do
        echo " $itf"
        v4="$(ip addr show dev $itf | awk '$1 == "inet" && /scope global/ {print $2}')"
        [ -n "$v4" ] && \
          echo "   $v4"
        v6="$(ip addr show dev $itf | awk '$1 == "inet6" && /scope global/ {print $2}')"
        if [ -n "$v6" ]; then
          network="${itf##*-}"
          prefix=
          for network in $network "$network"6 ""; do
            [ -n "$network" ] || break
                    ifstatus $network 2> /dev/null 1>&2 || continue
            prefix="$(ifstatus $network | jsonfilter -e '@["ipv6-prefix"][0].address')"
            mask="$(ifstatus $network | jsonfilter -e '@["ipv6-prefix"][0].mask')"
            if [ -n "$prefix" ]; then
              prefix="$prefix/$mask"
            fi
          done
          echo "   ${v6%%/*}"
          echo "   $prefix"
        fi
      done
    )
    echo

    uptime; echo -n " "; uname -a
    echo
  }
  if [ -z "$banner_read" ]; then
    hostinfo
    banner_read=yes
  fi
# }}}
#- pager, editor, visual setup # {{{
  alias more=less
  export PAGER=less
  vi() {
    if which vim 2> /dev/null 1>&2 && [ "$(tty)" != /dev/ttyS0 ]; then
      vim "$@"
      return $?
    else
      busybox vi "$@"
    fi
  }
  if which vim 2> /dev/null 1>&2 && [ "$(tty)" != /dev/ttyS0 ]; then
    #alias vi=vim
    export EDITOR=vim
    export VISUAL=vim
  else
    #alias vi="busybox vi"
    export EDITOR=vi
    export VISUAL=vi
  fi
# }}}
#- system tools # {{{
  [ -x /sbin/arp ] || arp() { cat /proc/net/arp; }
  [ -z /bin/ldd ] || ldd() { LD_TRACE_LOADED_OBJECTS=1 $*; }
# }}}
#- user convinience for RO/RW /-filesystem # {{{
  #_rootfs_mode="$(awk -F '[ ,]' '/^\/dev\/[0-9a-z]+ \/ [0-9a-z]+/ {print toupper($4)}' /proc/mounts)"
  #[ "$_rootfs_mode" = RW ] && PS1="[$_rootfs_mode] $PS1"
  #alias RO="root-ro; relogin #"
  #alias RW="root-rw; relogin #"
  #alias RO="echo RO disabled #"
  #alias RW="echo RW disabled #"
# }}}
#- enhanced prompt # {{{
  TXTBLK='\[\e[30m\]' # Black
  TXTRED='\[\e[31m\]' # Red
  TXTGRN='\[\e[32m\]' # Green
  TXTYLW='\[\e[1m\e[33m\]' # Yellow
  TXTBRN='\[\e[33m\]' # Brown
  TXTBLU='\[\e[34m\]' # Blue
  TXTPUR='\[\e[35m\]' # Purple
  TXTCYN='\[\e[36m\]' # Cyan
  TXTWHT='\[\e[37m\]' # White

  TXTREG='\[\e[0m\]'  # Regular
  TXTBLD='\[\e[1m\]'  # Bold
  TXTUND='\[\e[4m\]'  # Underline
  TXTBLN='\[\e[5m\]'  # Blink
  TXTINV='\[\e[7m\]'  # Inverse
  TXTRST='\[\e[0m\]'  # Text Reset

  CLRLINE='\[\e[K\]'

  BGBLK='\[\e[40m\]'   # Black
  BGRED='\[\e[41m\]'   # Red
  BGGRN='\[\e[42m\]'   # Green
  BGYLW='\[\e[43m\]'   # Yellow
  BGBLU='\[\e[44m\]'   # Blue
  BGPUR='\[\e[45m\]'   # Purple
  BGCYN='\[\e[46m\]'   # Cyan
  BGWHT='\[\e[47m\]'   # White

  CSRSAV='\[\e[s\]'  # Save CSR Pos
  CSRRST='\[\e[u\]'  # Restore CSR Pos
  CSRHOME='\[\e[1;1H\]'   # Set CSRPOS x/y=1/1

  [ -x /bin/stty ] && CSR_PS1_UPRIGHT="$(stty -a 2> /dev/null | tr ';' '\n' | awk '/col/ {print $2}')"
  [ -n "$CSR_PS1_UPRIGHT" ] || CSR_PS1_UPRIGHT=80
  CSR_PS1='\[\e[1;'"$((($CSR_PS1_UPRIGHT - 30)/2))"'H\]'   # Set approx. centered

  PS1_NONPRINT_BEGIN='\['
  PS1_NONPRINT_END='\]'

  case "$TERM" in
    rxvt* | urxvt | xterm | screen )
      PS1_RS='${PS1_NONPRINT_BEGIN} ${PS1_NONPRINT_END}${TXTYLW}${TXTINV}${PS1_NONPRINT_BEGIN} $\? = ${?} ${PS1_NONPRINT_END}${TXTRST}'
      PS1_BG='${!:+${PS1_NONPRINT_BEGIN} ${PS1_NONPRINT_END}${TXTGRN}${TXTINV}${PS1_NONPRINT_BEGIN} \044! = ${!} ${PS1_NONPRINT_END}${TXTRST}}'

      PS1_RW=
      [ "$_rootfs_mode" = RW ] && PS1_RW="${PS1_NONPRINT_BEGIN} ${PS1_NONPRINT_END}${TXTRED}${TXTINV} / ${TXTBLN} RW ${TXTRST}"

      PS1="${CSRSAV}${CSR_PS1}${PS1_RW}${PS1_RS}${PS1_BG}${PS1_NONPRINT_BEGIN} ${PS1_NONPRINT_END}${CSRRST}${TXTRST}${PS1}"
      ;;
    * ) : #
      ;;
  esac
# }}}
#- session cleanup - for bg processes {{{
  _CLEANUP_TRAPS="EXIT 1 3 6 15"
  _CLEANUP_PROCS=
  _CLEANUP() { local p; for p in $_CLEANUP_PROCS; do "$p"; done; trap '' $_CLEANUP_TRAPS; }
  trap '_CLEANUP; exit $?;' $_CLEANUP_TRAPS
# }}}
#- handy aliases # {{{
  alias relogin=". /etc/profile #"
  alias rL="relogin #"

  _CLEANUP_log() { [ -n "$_LOGREAD_PID" ] && { kill $_LOGREAD_PID 2>/dev/null 1>&2 ;}; }
  #__log_filter() {
  #  exec sed \
  # -e "/entered (forwarding|disabled) state$/d" \
  #   -e "/netifd: Network device '[^']+' link is (down|up)$/d" \
  #   -e "/netifd: VLAN '[^']+' link is (down|up)$/d"
  #}
  #alias log='_CLEANUP_log; logread -f | __log_filter & _LOGREAD_PID=$!; logread | __log_filter #'
  #alias log='_CLEANUP_log; logread -f & _LOGREAD_PID=$!; logread #'
  log() {
    _CLEANUP_log
    logread
    if tty < /proc/self/fd/1 > /dev/null; then
      logread -f & _LOGREAD_PID=$!
    fi
  }
  _CLEANUP_PROCS="$_CLEANUP_PROCS _CLEANUP_log"

  dSH() {
    local sh="$(which "$1")"
    shift
    sh -x "$sh" "$@"
  }

  ps() {
    if [ -x /usr/bin/ps ]; then
      /usr/bin/ps "$@"
    else
      /bin/busybox ps w
    fi
  }

  alias l="ls -la"
  alias j=jobs

  #alias reboot="echo '# /sbin/reboot ?' #"
  #alias halt="echo '# /sbin/halt ?' #"

  _IFSTAT_BIN="$(which ifstat)" # /opt/bin/ifstat
  _IFSTAT_ITF=
  _IFSTAT_ITF="$_IFSTAT_ITF br-lan eth0"
  ifstat() {
    if [ -n "$*" -o -z "$_IFSTAT_ITF" ]; then
      "$_IFSTAT_BIN" "$@"
    else
      local itf=; for i in $_IFSTAT_ITF; do
        [ -d /sys/class/net/$i ] && itf="$itf -i $i"
      done
      "$_IFSTAT_BIN" $itf 2
    fi
  }

  if [ -z "$STY" -a -z "$TMUX" ]; then
    if which tx > /dev/null && which tmux > /dev/null; then
      alias rS='exec tx'
      alias reattachScreen='exec tx'
    fi
  fi
# }}}
